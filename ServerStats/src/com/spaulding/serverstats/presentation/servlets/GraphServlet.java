package com.spaulding.serverstats.presentation.servlets;

import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.spaulding.serverstats.business.Service;
import com.spaulding.serverstats.business.SpecificService;
import com.spaulding.serverstats.business.entities.MonitoredObject;
import com.spaulding.serverstats.business.entities.RAM;
import com.spaulding.serverstats.business.service.RAMServiceImpl;
import com.spaulding.serverstats.commons.Commons;

/**
 * Servlet implementation class GraphServlet
 * 
 * Servlet permettant de générer un graphique à partir du type de requête (temps réel,
 * fixe au plus récent, fixe entre 2 dates, du composant mesuré (CPU, RAM, disques, 
 * réseau, ...)
 */
@WebServlet("/GraphServlet")
@Controller
public class GraphServlet extends HttpServlet {
    
    
    
    
	private static final long serialVersionUID = 1L;
	
	private Date begin;
	
	private Date end;
	private String graphType;
	
	private String monitoredObject;
	
	@Autowired
	private Service<RAM> ramService;
	private List<MonitoredObject> listOfMonitoredObject;

	
	private MonitoredObject currentMonitoredObject;
	

	@Autowired(required=true)
	//@Qualifier(value="ramServiceImpl")
	private SpecificService<RAM> ramSpecService;

	private Pattern datePattern = Pattern.compile("\\d{4}-\\d{2}-\\d{2}");

	private Pattern dateTimePattern = Pattern.compile("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$");

	/**
     * @see HttpServlet#HttpServlet()
     */
    public GraphServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		/*
		 * The servlet si called with several possible parameters : 
		 * - type = [dateToDate, streaming, default=last]
		 * - device = [cpu, ram, net, dsk, ...]
		 * - begin = Date
		 * - end = Date
		 * 
		 * It returns a graph generated by Google Charts : https://developers.google.com/chart/interactive/docs/
		 */
		switch ((String) request.getParameter("type")) {
		
		case "dateToDate" :
			if ((String) request.getParameter("begin") == "" || (String) request.getParameter("end") == "") {
				request.setAttribute("dateErrorMessage", "Une date est manquante");
			}
			else {
				
				try {
					
					begin = Commons.stringToDateTime((String) request.getParameter("begin"));
					end = Commons.stringToDateTime((String) request.getParameter("end"));
					
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				switch ((String) request.getParameter("device")) {
				
				case "cpu" : 
					break;	
					
				case "ram" : 
					System.out.println(ramSpecService.selectFromDateToDate(begin, end));
					break;
			/*		
				case "net" : 
					break;	
					
				case "dsk" : 
					break;	
				*/	
				default :
					
					break;
					
				}
				
			}
			break;
			
		case "last" :
			try {
				
				Matcher matcher = datePattern.matcher(request.getParameter("begin"));
				
				if (matcher.find()) {
					System.out.println(request.getParameter("begin"));
					begin = Commons.stringToDate((String) request.getParameter("begin"));
				}
				end = new Date();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					begin = Commons.stringToDate((String) request.getParameter("begin"));
				}
				catch (ParseException e1) {
					e1.printStackTrace();
				}
			}
			
			switch ((String) request.getParameter("device")) {
			
			case "cpu" :
				break;	
				
			case "ram" :
				System.out.println(ramSpecService);
				System.out.println(begin);
				System.out.println(end);
				System.out.println(ramSpecService.selectFromDateToDate(begin, end));
				break;	
		/*		
			case "net" : 
					
				break;	
				
			case "dsk" : 
				
				break;	
			*/	
			default :
				break;
				
			}
			break;
			
		default : 
			
			break;
			
		}
	}
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}
	

	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
    public Date getBegin() {
		return begin;
	}

	public MonitoredObject getCurrentMonitoredObject() {
		return currentMonitoredObject;
	}

	public Pattern getDatePattern() {
		return datePattern;
	}

	public Pattern getDateTimePattern() {
		return dateTimePattern;
	}

	public Date getEnd() {
		return end;
	}

	public String getGraphType() {
		return graphType;
	}

	public List<MonitoredObject> getListOfMonitoredObject() {
		return listOfMonitoredObject;
	}

	public String getMonitoredObject() {
		return monitoredObject;
	}

	public Service<RAM> getRamService() {
		return ramService;
	}

	public SpecificService<RAM> getRamSpecService() {
		return ramSpecService;
	}

	public void setBegin(Date begin) {
		this.begin = begin;
	}

	public void setCurrentMonitoredObject(MonitoredObject currentMonitoredObject) {
		this.currentMonitoredObject = currentMonitoredObject;
	}

	public void setDatePattern(Pattern datePattern) {
		this.datePattern = datePattern;
	}

	public void setDateTimePattern(Pattern dateTimePattern) {
		this.dateTimePattern = dateTimePattern;
	}

	public void setEnd(Date end) {
		this.end = end;
	}

	public void setGraphType(String graphType) {
		this.graphType = graphType;
	}

	public void setListOfMonitoredObject(List<MonitoredObject> listOfMonitoredObject) {
		this.listOfMonitoredObject = listOfMonitoredObject;
	}

	public void setMonitoredObject(String monitoredObject) {
		this.monitoredObject = monitoredObject;
	}

	public void setRamService(Service<RAM> ramService) {
		this.ramService = ramService;
	}

	public void setRamSpecService(SpecificService<RAM> ramSpecService) {
		this.ramSpecService = (RAMServiceImpl) ramSpecService;
	}

	

}
